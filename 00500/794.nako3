### [作品情報]
### タイトル=画面更新時実行のサンプル
### 作者=TKI(user_id=0)
### ライセンス=CC0
### 説明=画面遷移および、画面更新時実行と時間ミリ秒取得を使って動くものを表示する
### 対象バージョン=3.2.27
### URL=
### 種類=wnako
### タグ=
### 更新日時=2021-11-03 10:05:41
###

！インデント構文

//--------------------------------
//マウス判定のプラグイン　手前の四角を返す

マウス判定は空配列

●マウス判定削除
　マウス判定は空配列

●(arを)マウス判定登録
　マウス判定[マウス判定の配列要素数]はar

//マウス位置の最後に登録した矩形（手前のやつ）を戻す
●(xyで)マウス判定取得
　mx,my=xy
　マウス判定を配列複製して配列逆順して反復
　　　x,y,w,h=対象
　　　もしmx<xならば続ける
　　　もしmy<yならば続ける
　　　もしmx>x+wならば続ける
　　　もしmy>y+hならば続ける
　　　対象を戻す
　「なし」を戻す

//プラグインここまで
//--------------------------------
//イベント設定

マウスイベント=""
描画中キャンバスのマウス離した時には
　　マウス判定取得([マウスX,マウスY])
　　マウスイベント=それ[4]

//--------------------------------
//ここから

18に描画フォント設定
「タイトル画面」を画面更新時実行

//--------------------------------
●タイトル画面
　　次更新時は「タイトル画面」を画面更新時実行
　　全描画クリア
　　マウス判定削除
　　
　　a=絶対値(SIN(時間ミリ秒取得/200))
　　「rgba(0,0,0,{a})」に塗色設定
　　[30,160]へ「クリックでサンプルスタート」を文字描画
　　
　　空に塗色設定
　　size=[10,140,280,30,"タイトルクリック"]
　　sizeへ四角描画　　　　//配列に5つ要素あるけど大丈夫
　　sizeをマウス判定登録　//描画で使ったサイズを使いまわし
　　
　　//描画中キャンバスのマウス離した時には～でマウスイベントに値が入る
　　もしマウスイベントが"タイトルクリック"ならば
　　　　マウスイベントは空
　　　　//ここでゲーム中に入る前の処理（スコアの初期化など）
　　　　次更新時の画面更新処理取消
　　　　次更新時は「ゲーム中」を画面更新時実行


//--------------------------------
●ゲーム中
　　次更新時は「ゲーム中」を画面更新時実行。
　　全描画クリア
　　マウス判定削除
　　
　　//描画の更新
　　サンプル描画()
　　
　　[10,230]へ「うごく四角をマウス離した時は」を文字描画
　　
　　px=((時間ミリ秒取得%2000)-1000)/1000*300　　//300はキャンバス幅　マイナスの間は画面外
　　size=[px,240,40,40,"うごく四角"]　//x,y,w,h,イベント名
　　sizeに四角描画　
　　sizeをマウス判定登録　//描画で使ったサイズを使いまわし
　　
　　//操作に対するレスポンス
　　もしマウスイベントが「うごく四角」ならば
　　　　次更新時の画面更新処理取消
　　　　次更新時は「ゲームオーバー画面」を画面更新時実行。
　　
　　//関数終了後に次の画面更新時実行まで少し時間がある
　　//この間に操作があると「描画中キャンバスのマウス離した時」が実行される
　　

//--------------------------------
●ゲームオーバー画面
    次更新時は「ゲームオーバー画面」を画面更新時実行
　　全描画クリア
　　マウス判定削除
　　
　　[60+乱数(3),100+乱数(3)]へ「ゲームオーバー」を文字描画
　　
　　//点滅
　　もし(時間ミリ秒取得%1000)<500ならば
　　　　[10,130]へ「（クリックの1秒後タイトルへ）」を文字描画

　　//キャンバス全体(300x300)をクリックの当たり判定にする
　　[0,0,300,300,"ゲームオーバー"]をマウス判定登録
　　
　　もしマウスイベントが「ゲームオーバー」ならば
　　　　次更新時の画面更新処理取消
　　　　1秒後には
　　　　　　次更新時は「タイトル画面」を画面更新時実行。

//--------------------------------
//「時間ミリ秒取得」で取得した値をいじくることで作れる動きのサンプル
//画面更新時に呼ばれる
●サンプル描画
　　黒色に塗色設定
　　
    //文字の一部を書く
　　txt=「画面更新時実行」のINT(時間ミリ秒取得%2000/100)だけ文字左部分
　　[10,20]へtxtを文字描画
　　
　　//配列からいっこ取り出す　
　　txt=["ー","＼","｜","／"]のINT(時間ミリ秒取得%200/50)から1を配列取り出す
　　[10,40]へ「時間ミリ秒取得{txt}:{時間ミリ秒取得})」を文字描画
　　
　　//　下に動いて元の位置に戻っての繰り返し
　　py=時間ミリ秒取得%1000/100
　　[30,60+py]へ「↓」を文字描画
　　
　　//色　0 or 255
　　r=INT(時間ミリ秒取得/300)%2*255　
　　RGB(r,0,0)に塗り色設定
　　[30,90]へ「色変え」を文字描画
　　黒色に塗り色設定
　　
　　//左右にゆらゆら　　周期=200、揺れ幅=10
　　//SINは-1.0～1.0を返す　0付近ははやい　10倍で-10～10になるので座標に足す
　　//周期200はより大きくするとゆっくり動く
　　px=SIN(時間ミリ秒取得/200)*10
　　[30+px,120]へ「左右にゆらゆら」を文字描画
　　
　　//縦にぴょんぴょん
　　//SINは-1.0～1.0を返す　…ので絶対値で0～1.0にする。それ以外上記とおなじ
　　//y座標からこの値をマイナスするとぴょんぴょんする
　　py=絶対値(SIN(時間ミリ秒取得/200))*10
　　[30,160-py]へ「縦にぴょんぴょん」を文字描画
　　
　　//上記をアルファ(透明度0.0～1.0)に入れると出たり消えたり
　　a=絶対値(SIN(時間ミリ秒取得/200))
　　「rgba(0,0,0,{a})」に塗色設定　//0,0,0が黒色
　　[30,200]へ「透明度変化」を文字描画
　　黒色に塗色設定
　　
//時間に割った余り、絶対値、SINなど組み合わせて数値を作る
//数値を座標、線太さ、フォントサイズ、色などにいれる
//文字左部分、リフレイン、CHR()なども使える