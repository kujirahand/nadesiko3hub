### [作品情報]
### 掲載URL=https://n3s.nadesi.com/id.php?2885
### タイトル=レベルス2盤面シミュレータ
### 作者=TKI(user_id=0)
### ライセンス=MIT
### 説明=スマホのパズルゲーム「レベルス2」の盤面シミュレータです。盤面の入力、移動、一手戻すなどができます。公式はこちら「https://flowgdd.com/levelsii/index.php?lang=ja」
### 対象バージョン=3.6.25
### URL=https://flowgdd.com/levelsii/index.php?lang=ja
### 種類=wnako
### タグ=
### 更新日時=2024-10-31 21:23:56
###

！インデント構文
# ----------------------------------------------------------
もし「ファイル一覧取得」がシステム関数存在するならば　//webkit版の判定
　「#header」のDOM要素取得。
　それに「」をテキスト設定。
　DOM親要素に{"padding":"1em"}をDOMスタイル一括設定。
　もし描画中キャンバスならば
　　　描画中キャンバスの「高さ」に0をDOM属性設定
違えば
　もし描画中キャンバスならば
　　　描画中キャンバスの「高さ」に0をDOM属性設定

# ----------------------------------------------------------
デバッグ用とは変数=「」のラベル作成
改行作成
ゲームキャンバスとは変数=[46*5,54*5]のキャンバス作成
ターンラベルとは変数=「0」のラベル作成
「手目　」のラベル作成

棋譜表示用とは変数=[""]のセレクトボックス作成
棋譜表示用＠「size」=10
棋譜表示用に「棋譜(x,y,方向,コマ,トル,デル)」をヒント設定
//棋譜表示用＠「title」=「棋譜」//ヒント設定


改行作成
盤面とは変数=[]
棋譜とは変数={}
スコアとは変数=0//未実装

カード情報とは変数=[]　//グラフィック用　[x,y]
盤外カードとは変数={}　//除外されたカード（描画用）
カード位置とは変数=[]　//マウス操作用
掴みカード座標とは変数=[]//マウス操作用

# ----------------------------------------------------------
カード画像全部とは変数
カード画像辞書とは変数={}　//座標
描画情報={
　"カード幅":3*12
　"カード高":4*12
　"Xマージン":10
　"Yマージン":6
}
カード画像全部作成
●カード画像全部作成
　url=「」　//かっこいい絵つくったらいれる
　pw=描画情報["カード幅"]
　ph=描画情報["カード高"]
　
　もしurlならば
　　　カード画像全部=urlを画像読む
　違えば
　　　カード画像全部=[pw*13,ph*3]のキャンバス作成//urlを画像読む
　　　カード画像全部の「hidden」にオンをDOM属性設定
　記号={}
　記号＠「r」=".－＝＄♯Ｖ▽◇円品田苗∞"
　記号＠「y」=".－＝＄♯Ｖ▽◇円品田苗猫"
　記号＠「b」=".－＝＄♯Ｖ▽◇円品田苗猫"
　//　＠￥彡☆　　円品田甲丘　呪兜Ω　
　
　塗色={}
　塗色＠「r」=赤色
　塗色＠「y」=黄色
　塗色＠「b」=青色
　文字色={}
　文字色＠「r」=白色
　文字色＠「y」=黒色
　文字色＠「b」=白色
　iroで["b","y","r"]を反復
　　　py=対象キー*ph
　　　powを1から12まで繰り返す
　　　　　px=(pow-1)*pw
　　　　　もしurlでなければ//キャンバスに描く
　　　　　　　size=[px+0.5,py+0.5,pw-1,ph-1]
　　　　　　　もしiro=="r"かつpow==12ならば
　　　　　　　　　黒色に塗色設定
　　　　　　　　　sizeへ四角描画
　　　　　　　　　白色に塗色設定
　　　　　　　　　18に描画フォント設定
　　　　　　　　　「∞」を[px+pw/4,py+ph*2/3]へ文字描画
　　　　　　　違えば
　　　　　　　　　塗色＠iroに塗色設定
　　　　　　　　　sizeへ四角描画
　　　　　　　　　文字色＠iroに塗色設定
　　　　　　　　　18に描画フォント設定
　　　　　　　　　もしpow<10ならば
　　　　　　　　　　　powを[px+pw/3,py+ph*2/3-10]へ文字描画
　　　　　　　　　違えば
　　　　　　　　　　　powを[px+pw/5,py+ph*2/3-10]へ文字描画
　　　　　　　　　14に描画フォント設定
　　　　　　　　　記号＠iroからpowを参照
　　　　　　　　　それを[px+pw/3,py+ph*2/3+10]へ文字描画
　　　　　
　　　　　//共通
　　　　　key=「{iro}{pow}」
　　　　　カード画像辞書＠key=[px,py,pw,ph]
　
　ゲームキャンバスへ描画開始
　

●カード描画位置(x,y)
　x=(x-1+0.5)*描画情報["カード幅"] + (x-1)*描画情報["Xマージン"] + 描画情報["Xマージン"]/2
　y=(y-1+0.5)*描画情報["カード高"] + (y-1)*描画情報["Yマージン"] + 描画情報["Yマージン"]/2
　[x,y]を戻す

//opt["rate"]、opt["rotate"]
●カード画像カスタム描画(iro,pow,picxy,opt)
　keyとは変数=「{iro}{pow}」
　sizeとは変数=カード画像辞書＠key
　rateとは変数=1
　もしopt["rate"]ならば、rate=opt["rate"] //拡大率
　
　wとは変数=size[2] * rate//w
　hとは変数=size[3] * rate//h
　
　キャンバス状態保存
　picxyに描画起点設定
　
　もしopt["rotate"]ならば、opt["rotate"]だけ描画回転 //回転
　
　カード画像全部のsizeを[-w/2,-h/2,w,h]へ画像部分描画
　キャンバス状態復元

//picxyは中心点
●カード画像描画(iro,pow,picxy)
　opt={}
　カード画像カスタム描画(iro,pow,picxy,opt)

●カード画像回転描画(iro,pow,picxy,rotate)
　opt={"rotate":rotate}
　カード画像カスタム描画(iro,pow,picxy,opt)
　戻る

●カード画像拡大描画(iro,pow,picxy,rate)
　opt={"rate":rate}
　カード画像カスタム描画(iro,pow,picxy,opt)
　戻る
　

//マウス操作用
●カード判定登録(picxy,xy)
　変数[x,y,w,h]=カード画像辞書＠"b1"
　x,y=picxy//上書き
　
　sizeとは変数 =[x-w/2,y-h/2,w,h]
　カード位置に[size,xy]を配列追加
　
●カード判定削除
　カード位置を配列クリア

# ----------------------------------------------------------


//敵
改行作成
「次赤パネル：」のラベル作成
出現赤カードとは変数
出現赤カードDOM=[1,12,1]の値指定バー作成
出現赤カードDOMの「type」に「number」をDOM属性設定

出現赤カードDOMの変更した時には//v3.6.23
　対象からテキスト取得
　それに出現赤カード変更

#-----------------------------------------------------------------------

盤面初期化
●盤面初期化
　xとは変数
　yとは変数
　
　盤面=[]
　xを1から5まで繰り返す
　　　盤面[x]=[]
　　　yを1から5まで繰り返す
　　　　　盤面[x][y]="b1"

//エディットデータを戻す
●盤面ランダム
　xとは変数
　yとは変数
　listとは変数=[]
　9回、"b1"をlistに配列追加
　6回、"r1"をlistに配列追加
　10回、"y1"をlistに配列追加
　listを配列シャッフル
　listを「」で配列結合
　それを戻す
　




//-----------
●盤面カード色取得(cxcyの|cxcyから)
　変数 [cx,cy] = cxcy
　エラー監視
　　盤面[cx,cy]を「/(.)(\d+)/」で正規表現マッチ
　エラーならば
　　[cx,cy]を言う
　　終わり
　変数 [iro,num]=抽出文字列
　iroを戻す
●盤面カード数取得(cxcyの|cxcyから)
　変数 [cx,cy] = cxcy
　盤面[cx,cy]を「/(.)(\d+)/」で正規表現マッチ
　変数 [iro,num]=抽出文字列
　numを整数変換
　それを戻す
　

●盤外か(xyが)
　もしxy[0]が1から5の範囲内でなければ、1を戻す
　もしxy[1]が1から5の範囲内でなければ、1を戻す
　0を戻す
#-----------------------------------------------------------------------



●配列クリア(arを)
　配列取出(ar,0,(arの要素数))

//盤面変更(editに)
●盤面変更(editに)
　list=editを「(y|b|r)\d+」で正規表現マッチ
　listを配列逆順
　yを1から5まで繰り返す
　　　xを1から5まで繰り返す
　　　　　盤面[x][y]=listから配列ポップ
　nextとは変数
　もしlist[0]ならば
　　　next=list[0]を「\d+」で正規表現マッチ
　　　もし(next+0)が1から12の範囲内ならば
　　　　　nextに出現赤カード変更
　　　
　カード情報初期化




//盤面セット後に呼ぶ
//カード情報初期化
●カード情報初期化
　カード情報を配列クリア
　xとは変数
　yとは変数
　xを1から5まで繰り返す
　　カード情報[x]=[]
　　yを1から5まで繰り返す
　　　iro=[x,y]から盤面カード色取得
　　　pow=[x,y]から盤面カード数取得
　　　カード情報[x,y]=新規カード情報(iro,pow,x,y)
　
　盤外カード初期化
　
●盤外カード初期化
　盤外カード={"iro":"", "pow":1, "type":0, "time":0, "oldX":0,"oldY":0}
●新規カード情報(iro,pow,x,y)
　{"iro":iro, "pow":pow, "type":0, "time":0, "oldX":x,"oldY":y,"lvup":0}を戻す

#-----------------------------------------------------------------------
//xy1は座標[x,y]または[x,y,w,h]
//pは割合。0～1を想定。
●(xy1からxy2へpほど|pくらい)進んだ所
　ansとは変数=[]
　それを0から1まで繰り返す
　　　ans[それ]=xy1[それ]+(xy2[それ]-xy1[それ])*p
　ansを戻す

描画スイッチとは変数=オン
●描画オフ
　描画スイッチはオフ
●描画オフ解除
　描画スイッチはオン

//1操作の硬直時間
ANIME設定={"fps":30
　"時間":0.2//s
　"コマ数":30*0.2//上記を掛けたものを入れる
　}

//現在のx,y、カード
●カード描画(x,y,c)
　もしc["iro"]が空ならば戻る
　maxtimeとは変数 = ANIME設定＠"コマ数"
　timeとは変数 = c["time"]
　
　nowxyとは変数=カード描画位置(x,y)
　oldxyとは変数=カード描画位置(c["oldX"],c["oldY"])
　picxyとは変数=oldxyからnowxyへtime/maxtimeほど進んだ所
　
　typeとは変数=c["type"]
　
　c["type"]で条件分岐
　　　0ならば
　　　　　カード画像描画(c["iro"],c["pow"],picxy)
　　　　　カード判定登録(picxy,[x,y])
　　　1ならば//移動
　　　　　カード画像描画(c["iro"],c["pow"],picxy)
　　　2ならば//レベルアップ
　　　　　rate = 1+ maxtime/2/10 - ABS(time-maxtime/2)/10
　　　　　カード画像拡大描画(c["iro"],c["pow"],nowxy,rate)
　　　　　
　　　3ならば//撃破
　　　　　カード画像回転描画(c["iro"],c["pow"],picxy,time*45)
　　　4ならば//獲得
　　　　　カード画像回転描画(c["iro"],c["pow"],picxy,time*45)
　　　5ならば//移動失敗
　　　　　picxy = oldxyからnowxyへtime/maxtime/10ほど進んだ所
　　　　　カード画像描画(c["iro"],c["pow"],picxy)
　　　
　　　
　カード画像描画(c["iro"],c["pow"],picxy)
　
　


//移動方向=[-1]　移動時間=30
●全カード描画
　
　fpsとは変数 = ANIME設定＠"fps"
　maxtimeとは変数 = ANIME設定＠"コマ数"
　
　変数[x,y,移動中] = [0,0,0]//宣言
　yを1から5まで繰り返す
　　xを1から5まで繰り返す
　　　もしカード情報[x,y,"type"]>0ならば
　　　　　移動中=1
　　　　　抜ける
　　もし移動中ならば抜ける
　
　カード位置=[]//初期化
　
　もし移動中ならば
　　　n=maxtime
　違えば
　　　n=1
　
　もし描画スイッチがオフならば
　　　n=0
　
　//描画のループ
　timeを1からnまで繰り返す
　　　もしtime>1ならば
　　　　　(1/fps)秒待つ
　　　全描画クリア
　　　
　　　//撃破以外
　　　もし盤外カード["type"] = 3でなければ
　　　　　盤外カード描画(time)
　　　
　　　//通常カード
　　　yを1から5まで繰り返す
　　　　xを1から5まで繰り返す
　　　　　カード情報[x,y,"time"]=time
　　　　　カード描画(x,y,カード情報[x,y])
　　　　　
　　　//撃破は手前
　　　もし盤外カード["type"] = 3ならば
　　　　　盤外カード描画(time)
　　　
　
　レベルアップフラグとは変数=0
　yを1から5まで繰り返す
　　xを1から5まで繰り返す
　　　カード情報[x,y,"oldX"] = x
　　　カード情報[x,y,"oldY"] = y
　　　
　　　もしカード情報[x,y,"lvup"]ならば
　　　　　カード情報[x,y,"lvup"]=0
　　　　　[x,y]をカードレベルアップ
　　　　　レベルアップフラグ=1
　　　違えば
　　　　　カード情報[x,y,"type"]=0
　
　盤外カード初期化
　
　もし移動中ならば
　　　全カード描画


●盤外カード描画(time)
　xとは変数=盤外カード["toX"]
　yとは変数=盤外カード["toY"]
　盤外カード["time"]=time
　カード描画(x,y,盤外カード)
　


#-----------------------------------------------------------------------
//ゲーム用語

●出現赤カード変更(powに)
　pow=powを整数変換
　出現赤カード=pow
　出現赤カードDOMにpowをテキスト設定



//xy2にコピー（xy座標以外）
●カード移動(xy1をxy2へ)
　盤面[xy2[0],xy2[1]]=盤面[xy1[0],xy1[1]]
　カード情報[xy2[0],xy2[1]] = カード情報[xy1[0],xy1[1]]
　カード情報[xy2[0],xy2[1],"type"] = 1 //通常移動
　

※ TODO　設定 ※
●カードレベルアップ(xyを)
　変数[x,y] = xy
　カード情報[x,y,"pow"] = カード情報[x,y,"pow"] + 1
　//盤面[x,y] = カード情報[x,y,"iro"] & カード情報[x,y,"pow"] //ここでやらない
　カード情報[x,y,"type"] = 2 //レベルアップ
　
●カード撃破(xyをtoxyへ)
　変数[x,y] = xy
　盤外カード = カード情報[x,y]
　盤外カード["type"] = 3//破壊
　盤外カード["toX"] = toxy[0]　//描画用
　盤外カード["toY"] = toxy[1]　//描画用
　//盤外カード={"iro":"", "pow":1, "type":0, "time":0, "oldX":0,"oldY":0}

●カード取得(xyを)
　変数[x,y] = xy
　盤外カード = カード情報[x,y]
　盤外カード["type"] = 4//取得
　盤外カード["toX"] = x　//描画用
　盤外カード["toY"] = y　//描画用
　
●カード移動失敗(xy,移動方向)
　変数[x,y] = xy
　変数[px,py] = [0,0]//宣言
　
　移動方向で条件分岐
　　　「上」ならば
　　　　　py=-1
　　　「下」ならば
　　　　　py=1
　　　「左」ならば
　　　　　px=-1
　　　「右」ならば
　　　　　px=1
　　　　　
　カード情報[x,y,"type"] = 5//移動失敗
　カード情報[x,y,"oldX"] = x+px*1/10
　カード情報[x,y,"oldY"] = y+py*1/10


#-----------------------------------------------------------------------








//移動元、移動先=[x,y]
//移動方向 = 上下左右
●カード移動可能か(移動元,移動方向)
　
　もし移動元が盤外ならば、0を戻す
　
　移動先=移動元を配列複製
　移動方向で条件分岐
　　　「上」ならば
　　　　　移動先[1]=移動先[1]-1
　　　「下」ならば
　　　　　移動先[1]=移動先[1]+1
　　　「左」ならば
　　　　　移動先[0]=移動先[0]-1
　　　「右」ならば
　　　　　移動先[0]=移動先[0]+1
　もし移動先が盤外ならば、0を戻す
　
　iro1とは変数=移動元から盤面カード色取得
　iro2とは変数=移動先から盤面カード色取得
　pow1とは変数=移動元から盤面カード数取得
　pow2とは変数=移動先から盤面カード数取得
　//[iro1,iro2,pow1,pow2]を言う
　もしiro1が"r"ならば、
　　　0を戻す
　もしiro1が"y"ならば、//黄色+黄色
　　　もしiro2が"y"でなければ、0を戻す
　　　もしpow1==pow2ならば、1を戻す
　　　0を戻す
　もしiro1が"b"ならば、//青+青、青→赤or黄色
　　　もしiro2が"b"ならば
　　　　　もしpow1==pow2ならば、1を戻す//青合体
　　　
　　　もしpow1>=pow2ならば、1を戻す//青を黄色か赤に移動
　　　0を戻す

//
●カードスライド移動(移動元,移動方向)
　カード移動可能か(移動元,移動方向)
　もしそうでなければ0を戻す
　移動対象とは変数=盤面[移動元[0],移動元[1]]
　//移動対象をコンソール表示
　//「カードスライド移動　{移動元},{移動方向},{移動対象}」をコンソール表示
　
　pxとは変数=0
　pyとは変数=0
　移動方向で条件分岐
　　　「上」ならば
　　　　　py=-1
　　　「下」ならば
　　　　　py=1
　　　「左」ならば
　　　　　px=-1
　　　「右」ならば
　　　　　px=1
　移動先=[移動元[0]+px,移動元[1]+py]
　
　//次のカード
　iro1とは変数=移動元から盤面カード色取得
　iro2とは変数=移動先から盤面カード色取得
　pow1とは変数=移動元から盤面カード数取得
　pow2とは変数=移動先から盤面カード数取得
　
　lvupとは変数 = 0
　newiroとは変数 = "r"
　newpowとは変数 = 0
　gold = 0//獲得
　actとは変数 = {"青合体":0,"黄取得":0,"赤撃破":0,"黄合体":0}
　1回
　　　//青+青　青合体
　　　もしiro1="b"かつiro2="b"かつpow1==pow2ならば
　　　　　newiro = "r"
　　　　　newpow = 出現赤カード
　　　　　lvup = 1
　　　　　act["青合体"]=1
　　　　　抜ける
　　　//青→黄色　獲得
　　　もしiro1="b"かつiro2="y"かつpow1>=pow2ならば
　　　　　newiro = "r"
　　　　　newpow = 出現赤カード
　　　　　act["黄取得"]=1
　　　　　gold = [0,1,3,10,33,111,369,1228,4091,13622,45360,151049,450000]のpow2を配列参照
　　　　　抜ける
　　　//青→赤　撃破
　　　もしiro1="b"かつiro2="r"かつpow1>=pow2ならば
　　　　　newiro = "y"
　　　　　newpow = [0,1,1,1,2,3,4,5,5,5,5,5,5]のpow2を配列参照
　　　　　act["赤撃破"]=1
　　　　　抜ける
　　　//黄色+黄色　黄色合体
　　　もしiro1="y"かつiro2="y"かつpow1==pow2ならば
　　　　　newiro = "b"
　　　　　newpow = [0,1,1,1,2,3,4,5,5,5,5,5,5]のpow2を配列参照
　　　　　lvup = 1
　　　　　act["黄合体"]=1
　　　　　抜ける
　　　//どれでもない
　　　["エラー",iro1,iro2,pow1,pow2]を表示
　　　「ちょ」のエラー発生
　
　//スライド移動と新しいカード
　//{"xy":移動先,"iro":iro,"pow":pow}
　
　
　デバッグ用に[移動元,移動方向,iro2 & pow2, newiro & newpow]をテキスト設定
　
　//描画情報の変更
　変数 [toX,toY]= 移動先 //宣言
　
　もしact["赤撃破"]ならば
　　　toX=移動先[0]+5*px-5*py
　　　toY=移動先[1]-5*px+5*py
　　　移動先を[toX,toY]へカード撃破//とばす
　もしact["黄取得"]ならば
　　　移動先をカード取得
　
　もしact["青合体"]ならば
　　　カード情報[移動元[0],移動元[1],"lvup"] = 1
　　　
　もしact["黄合体"]ならば
　　　カード情報[移動元[0],移動元[1],"lvup"] = 1
　　　
　
　
　//後ろのカードの移動と新カード
　toX,toY = 移動先
　永遠の間
　　fromX=toX-px
　　fromY=toY-py
　　もし[fromX,fromY]が盤外ならば
　　　　//あたらしいパネル　共通処理と上書き
　　　　
　　　　カード情報[toX,toY]=新規カード情報(newiro,newpow,toX,toY)
　　　　[toX,toY]を[toX,toY]へカード移動//共通処理
　　　　
　　　　カード情報[toX,toY,"oldX"] = fromX
　　　　カード情報[toX,toY,"oldY"] = fromY
　　　　盤面[toX,toY] = newiro & newpow
　　　　抜ける
　　違えば
　　　　
　　　　[fromX,fromY]を[toX,toY]へカード移動
　　　　
　　toX,toY = [fromX,fromY]
　
　もしlvupならば
　　　盤面[移動先[0],移動先[1]] = iro1 & (pow1+1)
　
　
　//棋譜に追加する
　//[[x,y],ムキ,コマ,トル,デル]
　//[移動元,移動方向,移動対象,iro2 & pow2,newiro & newpow]を言う
　[移動元,移動方向,移動対象,iro2 & pow2,newiro & newpow]を戻す
　
　


//------------------------------
※　マウス操作　※
//カード位置とマウスXマウスY(引数)からカードの[x,y]を戻す
//マウス座標→カード[x][y]の[x,y]を戻す
//カード位置に[size,xy]を配列追加
●マウス位置カード(mx,my)
　　//変数 [mx,my] = [マウスX,マウスY]
　　カード位置を反復
　　　　変数 [x,y,w,h]=対象[0]
　　　　
　　　　もしmxがxから(x+w)の範囲内ならば
　　　　　　もしmyがyから(y+h)の範囲内ならば
　　　　　　　　対象[1]を戻す
　　　　　　　　
　　空を戻す
　　

//イベントはプログラムの下に置く
カード掴み中はオフ
ゲームキャンバスのマウス押した時には
　変数 cxcy = マウス位置カード(マウスX,マウスY)
　もしcxcyが空ならば戻る
　もしカード掴み中でなければ
　　　//cxcyをカード掴む
　　　カード掴み中はオン
　　　掴みカード座標はcxcy

ゲームキャンバスのマウス移動した時には
　　変数 cxcy=マウス位置カード(マウスX,マウスY)
　　
　　もしcxcyが空ならば戻る
　　もしカード掴み中ならば
　　　　移動方向は空
　　　　もし(cxcy[0]==掴みカード座標[0])&&(cxcy[1]=掴みカード座標[1]+0)ならば、戻る//離さない
　　　　
　　　　もし(cxcy[0]==掴みカード座標[0])&&(cxcy[1]=掴みカード座標[1]+1)ならば、移動方向は「下」
　　　　もし(cxcy[0]==掴みカード座標[0])&&(cxcy[1]=掴みカード座標[1]-1)ならば、移動方向は「上」
　　　　もし(cxcy[1]==掴みカード座標[1])&&(cxcy[0]=掴みカード座標[0]+1)ならば、移動方向は「右」
　　　　もし(cxcy[1]==掴みカード座標[1])&&(cxcy[0]=掴みカード座標[0]-1)ならば、移動方向は「左」
　　　　もし移動方向が空ならば、戻る//離さない
　　　　カード判定削除
　　　　カード掴み中はオフ
　　　　
　　　　指手とは変数=カードスライド移動(掴みカード座標,移動方向)
　　　　もし指手ならば
　　　　　　掴みカード座標は[]
　　　　　　指手チェック(指手)
　　　　　　もしそれが真ならば
　　　　　　　　指手を棋譜追加
　　　　　　　　盤面ログ追加
　　　　　　違えば
　　　　　　　　「指手がおかしい[{指手}]」と言う
　　　　違えば
　　　　　　カード移動失敗(掴みカード座標,移動方向)
　　　　掴みカード座標は[]
　　　　全カード描画
　　　　





ゲームキャンバスのマウス離した時には
　カード掴み中はオフ
　掴みカード座標は[]
ゲームキャンバスのマウス出た時には
　カード掴み中はオフ
　掴みカード座標は[]
　
//------------------------------
#棋譜関連
棋譜={}
盤面ログ=[]
棋譜X手目=0
スコア=0
//初期化タイミング
//・JSONからロード
//・盤面入力から開始
//・URLパラメータからロード　　//未実装
//

●ゲームスタート(opt)
　盤面初期化
　1に出現赤カード変更
　もしopt["edit"]ならば
　　　opt["edit"]に盤面変更
　　　opt["edit"]で棋譜初期化
　違えばもしopt["json"]ならば
　　　棋譜=opt["json"]をJSONデコード
　　　棋譜["init"]に盤面変更
　　　もし棋譜["pow"]が1から12の範囲内ならば
　　　　　棋譜["pow"]に出現赤カード変更
　　　棋譜反映
　違えば
　　　opt["edit"]=盤面ランダム
　　　ゲームスタート(opt)
　　　戻る
　
　もしopt["pow"]ならば
　　　opt["pow"]に出現赤カード変更
　
　カード情報初期化
　スコア=0
　棋譜X手目=0
　
　盤面ログを配列クリア
　盤面ログ追加//0手目
　全カード描画
　棋譜反映

※　TODO　※ 
●パラメータ解析スタート
　ブラウザURLをURLパラメータ解析
　それ＠「json」をJSONエンコード
　ゲームスタート({"json":それ})

●棋譜ロード(jsonから)
　ゲームスタート({"json":json})

●棋譜初期化(editで)
　棋譜={
　"init":edit, //盤面エディットデータ
　"pow":0, //敵
　"moves":[], //棋譜
　"comments":{}, //コメント 
　}

//------------------------------
※　TODO　エラー出す？　※ 
●棋譜追加(指手を)
　もし指手チェック(指手)が偽ならば
　　　//エラー出す
　　　戻る
　
　moves=棋譜["moves"]
　もしmoves[棋譜X手目]ならば
　　　moves[棋譜X手目]をコンソール表示
　　　max=movesの要素数
　　　cnt=max-棋譜X手目
　　　movesの棋譜X手目からcntを配列取り出す//消す
　　　盤面ログの棋譜X手目からcntを配列取り出す//消す
　　　
　
　moves[棋譜X手目]=指手
　棋譜反映
　棋譜X手目=棋譜X手目+1
　
　
●棋譜反映
　moves=棋譜["moves"]
　棋譜表示用にmovesをセレクトボックスアイテム設定
　棋譜表示用の「selectedIndex」に棋譜X手目をDOM属性設定
　ターンラベルに棋譜X手目をテキスト設定

//[xy,ムキ,コマ,トル,デル]を想定
●指手チェック(指手)
　もし(指手の要素数)が5でなければ偽を戻す
　もし指手[0]が盤外ならば偽を戻す//xy
　もし（指手[1]が「[上下左右]」に正規表現マッチ）でなければ偽を戻す//移動方向
　もし（指手[2]が「[by]\d+」に正規表現マッチ）でなければ偽を戻す//移動したカード
　もし（指手[3]が「[byr]\d+」に正規表現マッチ）でなければ偽を戻す//とったカード
　もし（指手[4]が「[byr]\d+」に正規表現マッチ）でなければ偽を戻す//でたカード
　
　真を戻す

//1手進める
●棋譜進む
　棋譜非表示進む
　
　棋譜反映
　全カード描画
　

●棋譜非表示進む
　もし棋譜["moves",棋譜X手目]ならば
　　　変数[xy,ムキ,コマ,トル,デル] = 棋譜["moves",棋譜X手目]
　　　もしデルが「/r(\d+)/」に正規表現マッチするならば
　　　　　抽出文字列に出現赤カード変更
　　　カードスライド移動(xy,ムキ)
　　　棋譜X手目=棋譜X手目+1
　　　
　　　盤面ログ追加

//棋譜1手戻す
●棋譜戻す
　もし棋譜X手目が0ならば、戻る
　棋譜ワープ(棋譜X手目-1)
　//ターンラベルに棋譜X手目をテキスト設定

//10手進むなど
●棋譜ワープ(x)
　描画オフ
　もしxが0ならば
　　　棋譜X手目 = 0
　　　棋譜["init"]に盤面変更
　　　カード情報初期化
　違えば
　　　edit=盤面ログ[x]
　　　もしeditならば
　　　　　棋譜X手目 = x
　　　　　editに盤面変更
　　　　　カード情報初期化
　　　違えば
　　　　　//棋譜ワープ(0)
　　　　　棋譜X手目 = 0
　　　　　棋譜["init"]に盤面変更
　　　　　x回、棋譜非表示進む
　　　　　カード情報初期化
　　　
　描画オフ解除
　
　全カード描画
　棋譜反映


//現在局面を追加
●盤面ログ追加
　logとは変数=""
　yを1から5まで繰り返す
　　　xを1から5まで繰り返す
　　　　　log=logに盤面[x][y]を追加
　盤面ログ[棋譜X手目]=log

//------------------------------
盤面描画用とは変数 //dom
改行作成
「1手戻る」のボタン作成
それをクリックした時には
　　棋譜戻す

「1手進む」のボタン作成
それをクリックした時には
　　棋譜進む




//局面図

//------------------------------

改行作成
「更新」のボタン作成
それをクリックした時には
　カード情報初期化
　描画オフ解除
　全カード描画
//それに「バグって動かないとき押してください」をヒント設定


「盤面出力」のボタン作成
それをクリックした時には
　　結果とは変数=""
　　yを1から5まで繰り返す
　　　xを1から5まで繰り返す
　　　　結果=盤面[x][y]を結果に追加
　　　　もしxが5ならば
　　　　　　結果=結果に改行を追加
　　　　違えば
　　　　　　結果=結果に「,」を追加
　　結果=結果に「next:r」を追加
　　結果=出現赤カードを追加
　　盤面描画用に結果をテキスト設定
　　戻る

※ TODO ※
「棋譜出力」のボタン作成
それをクリックした時には
　　棋譜をコンソール表示
　　棋譜をJSONエンコード
　　盤面描画用にそれをテキスト設定
　　
/*
※　デバッグ用　※
「デバッグ用」のボタン作成
それをクリックした時には
　　{"カード掴み中":カード掴み中
"掴みカード座標":掴みカード座標
"カード位置":カード位置
"カード情報":カード情報
"盤外カード":盤外カード
"描画スイッチ":描画スイッチ
}をコンソール表示
*/

改行作成
盤面描画用=「」のテキストエリア作成
盤面描画用＠「rows」=8
盤面描画用＠「cols」=30

「に盤面変更」のボタン作成
それをクリックした時には
　　edit=盤面描画用からテキスト取得
　　エラー監視
　　　　editをJSONデコード
　　　　ゲームスタート({"json":edit})
　　エラーならば
　　　　ゲームスタート({"edit":edit})
　　　　
　　
　　戻る
　　



//------------------------------
改行作成
「盤面変更サンプル1」のボタン作成
それのクリック時には
　　サンプル出力
●サンプル出力
edit=「y5,y5,y5,y5,y5
y5,y5,y5,b8,b9
y5,y11,y5,y9,b6
y5,b5,r9,y5,y5
y5,y5,b10,r9,r10
next:r12
青11を作ってみよう」
　盤面描画用にeditをテキスト設定

「盤面変更サンプル2」のボタン作成
それのクリック時には
　　最小構成サンプル出力
●最小構成サンプル出力
　edit=「b4b8y5y8r11
y5y5r10r11b11
b7b7b5b4r10
y5y9b5b4r11
r11y6b6b5r12
r11
手入力するときはこれでOK」
　盤面描画用にeditをテキスト設定

/*「棋譜サンプル」のボタン作成
それのクリック時には
　　棋譜サンプル出力
●棋譜サンプル出力
　戻る
*/

//------------------------------
棋譜表示用のダブルクリックした時には
　　棋譜表示用の「selectedIndex」をDOM属性取得
　　棋譜ワープ(整数変換(それ))



ゲームスタート({})