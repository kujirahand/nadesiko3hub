### [作品情報]
### 掲載URL=https://n3s.nadesi.com/id.php?2955
### タイトル=2人リバーシ
### 作者=クレスト(user_id=0)
### ライセンス=MIT
### 説明=まだ普通のリバーシ。人数、初期配置、広さ等を拡張してみたいと思っている。このプログラムはJavaScriptから戻ってきて書いたもの。そのせいで明らかになでしこの趣向を無視しているがお許しくだされ
### 対象バージョン=3.6.44
### URL=
### 種類=wnako
### タグ=リバーシ,オセロ,ゲーム,対戦ゲーム,テーブルゲーム,コード説明未記載,未完成,未改造
### 更新日時=2025-02-06 20:44:13
###

// リバーシ 2人対戦
変数 is_gaming = true
変数 is_loading = false

定数 cells = 8
定数 rect  = [cells, cells]
定数 canvas = 描画中キャンバス
canvas.width  = 700
canvas.height = 700

定数 width  = canvas.width  / rect[0]
定数 height = canvas.height / rect[1]
定数 stage = []
変数 present = 0

変数 players = 2

set_stage()
stage[3][3] = 0
stage[4][4] = 0
stage[3][4] = 1
stage[4][3] = 1
draw()

描画中キャンバスをマウス押時には:
  もし!is_gamingなら 戻
  もしis_loadingなら 戻
  is_loading = !is_loading
  
  x ＝ FLOOR(マウスX / width)
  y ＝ FLOOR(マウスY / height)
  もしset_stone(x, y)なら:
    next_turn()
  draw()
  
  is_loading = !is_loading

●set_stage:
  定数 row = []
  rect[1]回:
    配列追加(row, undefined)
  rect[0]回:
    配列追加(stage, 配列複製(row))

●set_stone(x, y):
  もし(!in_area(x, y) || stage[x][y] != undefined)なら falseを戻
  定数 places = get_places(x, y)
  もし要素数(places) == 0なら falseを戻
  stage[x][y] = present
  rowで0から要素数(places)まで繰り返す:
    places[row]を反復:
      stage[対象[0]][対象[1]] = present
  trueを戻

●get_places(x, y):
  もし!in_area(x, y) || stage[x][y] != undefinedなら []を戻
  定数 vectors = [[1, 0], [1, 1]]
  定数 places  = []
  4回:
    定数 line1 = get_line(x, y, vectors[0][0], vectors[0][1])
    定数 line2 = get_line(x, y, vectors[1][0], vectors[1][1])
    もし要素数(line1) > 0なら 配列追加(places, line1)
    もし要素数(line2) > 0なら 配列追加(places, line2)
    vectors[0] = [-vectors[0][1], vectors[0][0]]
    vectors[1] = [-vectors[1][1], vectors[1][0]]
  placesを戻

●get_line(x, y, dx, dy):
  変数 px = x
  変数 py = y
  変数 places = []
  (cells - 1)回:
    px = px + dx
    py = py + dy
    もし!in_area(px, py)なら []を戻
    もしstage[px][py] == undefinedなら []を戻
    もしstage[px][py] == presentなら placesを戻
    配列追加(places, [px, py])
  []を戻

●in_area(x, y):
  0 =< x && x < rect[0] && 0 =< ｙ && ｙ < rect[1]を戻

●next_turn():
  present = (present + 1) % players

●draw():
  iで0からrect[0] - 1まで繰り返す:
    jで0からrect[1] - 1まで繰り返す:
      塗色設定("rgb(0, 128, 64)")
      四角描画([i * width, j * height, width, height])
      定数 e = stage[i][j]
      もしe == undefinedなら 続
      定数 value = FLOOR(255 * e / (players - 1))
      塗色設定(RGB(value, value, value))
      円描画([(i + 0.5) * width, (j + 0.5) * height], width / 3)