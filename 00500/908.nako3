### [作品情報]
### 掲載URL=https://n3s.nadesi.com/id.php?908
### タイトル=コラッツ🌸ベンチ
### 作者=sp88(user_id=0)
### ライセンス=CC0
### 説明=コラッツ予想の１までの距離を求める通常のアルゴリズムで、Ｐｙｔｈｏｎ３より高速に動作することを確認して、萌え萌えするためのプログラムです。
### 対象バージョン=3.2.33
### URL=https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%A9%E3%83%83%E3%83%84%E3%81%AE%E5%95%8F%E9%A1%8C
### 種類=wnako
### タグ=
### 更新日時=2022-01-21 12:48:52
###

＃🌸～～　なでしこ３はＰＹＴＨＯＮ３より速かった件　～～🐍
＃
＃ＰＹＴＨＯＮ３は、連続１００，０００までで、１１５０ｍｓ
＃なでしこ３は、連続１００，０００までで、９５０ｍｓ
＃なでしこ３だからって馬鹿にすると「月に代わっておしおきよ💘」


●（Ｎで）コラッツ関数とは
　　距離は、０。
　　！（Ｎ＝１）の間、繰り返す
　　　　＃Ｎを表示。
　　　　距離は、距離＋１。
　　　　もし、（Ｎ％２）が０ならば
　　　　　　Ｎは、Ｎ÷２
　　　　違えば
　　　　　　Ｎは、Ｎ×３＋１
　　　　ここまで。
　　ここまで。
　　距離を戻す。
ここまで。

●コラッツプログラム実行とは
　　条件数は、１。
　　（条件数＝１）の間、繰り返す
　　　　「いくつのコラッツ関数？（０：まとめて）」と尋ねて、指定数へ代入。

　　　　もし、指定数＜１ならば
　　　　　　「それじゃあいくつまでのコラッツ関数？」と尋ねて、マックスへ代入。
　　　　　　もし、マックス＜１ならば
　　　　　　　　マックスは、１。
　　　　　　ここまで。
　　　　違えば
　　　　　　時間ミリ秒取得して開始時刻に代入。
　　　　　　結果は、コラッツ関数（指定数）。
　　　　　　時間ミリ秒取得して終了時刻に代入。
　　　　　　計算時間は、整数変換（（終了時刻－開始時刻）×１０００）。
　　　　　　「｛指定数｝の距離は｛結果｝です（かかった時間：｛計算時間｝マイクロ秒）」と言う。
　　　　　　条件数は、０。
　　　　ここまで。

　　　　もし、条件数＝０ならば
　　　　　　「もう一度やる？（０：ＮＯ、１：ＹＥＳ）」と尋ねて、条件数へ代入。
　　　　違えば
　　　　　　合計は、０。
　　　　　　時間ミリ秒取得して開始時刻に代入。
　　　　　　Ｘを１からマックスまで繰り返す
　　　　　　　　結果は、コラッツ関数（Ｘ）。
　　　　　　　　＃「｛Ｘ｝の距離は｛結果｝です」と言う。　＃テスト用
　　　　　　　　合計は、（合計＋結果）％１００００００００７。
　　　　　　ここまで。
　　　　　　時間ミリ秒取得して終了時刻に代入。
　　　　　　計算時間は、整数変換（終了時刻－開始時刻）。
　　　　　　「｛マックス｝までの総距離の暗号は｛合計｝です。（かかった時間：｛計算時間｝ミリ秒）」と言う。
　　　　　　条件数は、０。
　　　　ここまで。
　　ここまで。
　　「お疲れ様でした」と言う。
ここまで。

コラッツボタン＝「コラッツ開始」のボタン作成。
コラッツボタンをクリックした時には
　　コラッツプログラム実行。
ここまで。