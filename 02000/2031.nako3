### [作品情報]
### タイトル=抵抗値とカラーコードを相互変換するWebアプリ
### 作者=賢者ユメミノウツツ(user_id=63)
### ライセンス=MIT
### 説明=抵抗の値とカラーコードを相互変換できるWebアプリです。今まで出してた色→値を統合し、さらに値→色の機能も追加しました。
### 対象バージョン=3.4.5
### URL=
### 種類=wnako
### タグ=
### 更新日時=2023-03-01 19:59:35
###

// 抵抗値とカラーコードを相互変換するWebアプリ
// Created by ymm_utt
// 枠に入力してEnterを押しても変換します。
// ラジオボタンは文字をクリックしても反応します。
// CSSの型崩れがあったらスミマセン。貯蔵庫上でスタイル考えるのしんどいので許して。

################################################################################
#################### 抵抗値→カラーコード ####################
// 0.1Ω～1.00GΩまで対応しています。一応秋月に実物がありました。
// 実物はありますが0Ω抵抗には対応していません。黒1本です。

########## 定数 ##########
定数　色対数字配列＝[「黒」,「茶」,「赤」,「橙」,「黄」,「緑」,「青」,「紫」,「灰」,「白」]
定数　色対乗数配列＝[「白」,「銀」,「金」,「黒」,「茶」,「赤」,「橙」,「黄」,「緑」,「青」,「紫」,「灰」]
定数　貯蔵庫親要素＝DOM親要素



########## GUI ##########
// 「h1」のDOM要素作成して「抵抗値　⇒　カラーコード」をDOMテキスト設定
// それをDOM親要素へDOM子要素追加
「【抵抗値　⇒　カラーコード】」のラベル作成
　それに{"文字サイズ": "1.7em", "font-weight": "bold", "border-bottom": "1px solid #000000", "背景色": "#ffe0e0", "padding": "0 0em"}をDOMスタイル一括設定
改行作成して改行作成して改行作成

『抵抗値を入力してください。（単位はオーム[Ω]。「k」、「M」、「G」、「m」の接頭語が使えます）』のラベル作成
改行作成
　
「↓」のラベル作成して改行作成
抵抗エディタ＝空のエディタ作成
「 Ω」のラベル作成
　それの「padding」に「0 3em 0 0」をDOMスタイル設定
抵抗種類ラジオ＝「抵抗種類」で["4線（カーボン抵抗など）","5線（金属皮膜抵抗など）"]のラジオボタン作成
// 抵抗種類ラジオを反復：
//     「{対象キー}: {対象}」を表示。
　抵抗種類ラジオ["DOM_input4線（カーボン抵抗など）"]の「checked」にオンをDOM属性設定
　抵抗種類ラジオ["DOM_label4線（カーボン抵抗など）"]の「text-decoration」に「underline」をDOMスタイル設定
　抵抗種類ラジオ["DOM_label5線（金属皮膜抵抗など）"]の「text-decoration」に「underline」をDOMスタイル設定
改行作成
変換ボタン＝「変換」のボタン作成
　変換ボタンに{"余白": "5px", "文字サイズ": "1.5em"}をDOMスタイル一括設定
改行作成して改行作成して改行作成


「入力は」のラベル作成
　それの「padding」に「0 8.62em 0 0」をDOMスタイル設定
「:」のラベル作成
　それの「padding」に「0 1em 0 0」をDOMスタイル設定
抵抗入力ラベル1＝「x」のラベル作成
　それの「font-weight」に「bold」をDOMスタイル設定
「 Ω」のラベル作成
　それの「font-weight」に「bold」をDOMスタイル設定
「(」のラベル作成
　それの「font-weight」に「bold」をDOMスタイル設定
　それの「padding」に「0 0 0 1em」をDOMスタイル設定
抵抗入力ラベル2＝「x」のラベル作成
　それの「font-weight」に「bold」をDOMスタイル設定
「 Ω)」のラベル作成
　それの「font-weight」に「bold」をDOMスタイル設定
改行作成

「有効数字2桁で表すと」のラベル作成
　それの「padding」に「0 2em 0 0」をDOMスタイル設定
「:」のラベル作成
　それの「padding」に「0 1.5em 0 0」をDOMスタイル設定
抵抗指数2表記ラベル＝「xx × 10^x Ω」のラベル作成
　それの「font-weight」に「bold」をDOMスタイル設定
改行作成

「有効数字3桁で表すと」のラベル作成
　それの「padding」に「0 2em 0 0」をDOMスタイル設定
「:」のラベル作成
　それの「padding」に「0 1em 0 0」をDOMスタイル設定
抵抗指数3表記ラベル＝「xxx × 10^x Ω」のラベル作成
　それの「font-weight」に「bold」をDOMスタイル設定
改行作成して改行作成して改行作成


「色は、」のラベル作成
　それの「padding」に「0 2em 0 0」をDOMスタイル設定
抵抗色ラベル1＝「－」のラベル作成
抵抗色ラベル2＝「－」のラベル作成
抵抗色ラベル3＝「－」のラベル作成
「 」のラベル作成
　それの「文字サイズ」に「2em」をDOMスタイル設定
抵抗色ラベル4＝「－」のラベル作成
　抵抗色ラベル1の「文字サイズ」に「2em」をDOMスタイル設定
　抵抗色ラベル2の「文字サイズ」に「2em」をDOMスタイル設定
　抵抗色ラベル3の「文字サイズ」に「2em」をDOMスタイル設定
　抵抗色ラベル4の「文字サイズ」に「2em」をDOMスタイル設定
改行作成して改行作成

「（許容差はカーボン抵抗は金色、金属皮膜抵抗は茶色が一般的です。）」のラベル作成



// ラジオのラベルをクリックしたら変更
抵抗種類ラジオ["DOM_label4線（カーボン抵抗など）"]をクリックした時には、
    抵抗種類ラジオ["DOM_input4線（カーボン抵抗など）"]の「checked」にオンをDOM属性設定
ここまで
抵抗種類ラジオ["DOM_label5線（金属皮膜抵抗など）"]をクリックした時には、
    抵抗種類ラジオ["DOM_input5線（金属皮膜抵抗など）"]の「checked」にオンをDOM属性設定
ここまで



// ラジオボタン作成
// S: グループのname, OPTIONS: 選択肢の配列
// DOMではなくname, value, ラジオのDOM, ラベルのDOMを含んだJSONで戻ることに注意。
●（SでOPTIONSの）ラジオボタン作成とは
    A={name: S}
    OPTIONSを反復
        DOM＝「input」のDOM部品作成
        DOMの「type」に「radio」をDOM属性設定
        DOMの「name」にSをDOM属性設定
        DOMの「value」に対象をDOM属性設定
        DOM親要素へDOMをDOM子要素追加
        DOM_label=" "&対象&" "のラベル作成
        A["value"&対象]=対象
        A["DOM_input"&対象]=DOM
        A["DOM_label"&対象]=DOM_label
    ここまで
    Aで戻る
ここまで



########## クリックした時の処理 ##########
変換ボタンをクリックした時には、
    main__抵抗to色処理
ここまで

抵抗エディタをキー押した時には、
    もし押されたキー＝「Enter」ならば、
        main__抵抗to色処理
    ここまで。
ここまで


// メイン処理
●抵抗to色処理とは
    ラベルリセット
    
    もし、（抵抗種類ラジオ["DOM_input4線（カーボン抵抗など）"]の「checked」をDOM属性取得）ならば、
        抵抗本数＝4
        // 「カーボン抵抗が選択されています。」と表示。
    違えば、
        抵抗本数＝5
        // 「金属皮膜抵抗が選択されています。」と表示。
    ここまで
    
    抵抗値＝抵抗値取得
    // 「入力は｛抵抗値｝Ω」を表示
    抵抗入力ラベル1に（抵抗エディタのDOMテキスト取得を英数記号半角変換）をDOMテキスト設定
    抵抗入力ラベル2に抵抗値をDOMテキスト設定
    
    もし（（抵抗値<0.1）｜｜（抵抗値>1e9））ならば、
        「0.1Ω～1GΩの範囲にのみ対応しています。」と表示して終わる。
    ここまで
    
    抵抗値配列2＝抵抗値から2桁取得
    抵抗値配列3＝抵抗値から3桁取得
    // それを表示
    // もし、抵抗値配列＠2>=5ならば、
    //     もし、抵抗値配列＠1=9ならば、
    //         抵抗指数2表記ラベルに「｛抵抗値配列＠0+1｝0 × 10^｛抵抗値配列＠3-1｝ Ω」をDOMテキスト設定
    //     違えば、
    //         抵抗指数2表記ラベルに「｛抵抗値配列＠0｝｛抵抗値配列＠1+1｝ × 10^｛抵抗値配列＠3-1｝ Ω」をDOMテキスト設定
    //     ここまで
    // 違えば、
    //     抵抗指数2表記ラベルに「｛抵抗値配列＠0｝｛抵抗値配列＠1｝ × 10^｛抵抗値配列＠3-1｝ Ω」をDOMテキスト設定
    // ここまで
    抵抗指数2表記ラベルに「｛抵抗値配列2＠0｝｛抵抗値配列2＠1｝ × 10^｛抵抗値配列2＠3-1｝ Ω」をDOMテキスト設定
    抵抗指数3表記ラベルに「｛抵抗値配列3＠0｝｛抵抗値配列3＠1｝｛抵抗値配列3＠2｝ × 10^｛抵抗値配列3＠3-2｝ Ω」をDOMテキスト設定
    
    もし、抵抗本数＝4ならば、
        抵抗値配列2を抵抗本数で抵抗色変換
    違えば、
        抵抗値配列3を抵抗本数で抵抗色変換
    ここまで
ここまで。


########## 関数 ##########
// ラベルをリセットする
●ラベルリセットとは
    抵抗入力ラベル1に「x」をDOMテキスト設定
    抵抗入力ラベル2に「x」をDOMテキスト設定
    抵抗指数2表記ラベルに「xx × 10^x Ω」をDOMテキスト設定
    抵抗指数3表記ラベルに「xxx × 10^x Ω」をDOMテキスト設定
    抵抗色ラベル1に「－」をDOMテキスト設定
    抵抗色ラベル2に「－」をDOMテキスト設定
    抵抗色ラベル3に「－」をDOMテキスト設定
    抵抗色ラベル4に「－」をDOMテキスト設定
    
    抵抗色ラベル1に{"ボーダー":"none", "背景色": 白色, "色": 黒色}をDOMスタイル一括設定
    抵抗色ラベル2に{"ボーダー":"none", "背景色": 白色, "色": 黒色}をDOMスタイル一括設定
    抵抗色ラベル3に{"ボーダー":"none", "背景色": 白色, "色": 黒色}をDOMスタイル一括設定
    抵抗色ラベル4に{"ボーダー":"none", "背景色": 白色, "色": 黒色}をDOMスタイル一括設定
ここまで



// 抵抗エディタから抵抗値を取得
// 「k」、「M」、「G」、「m」も使える。
// 既知の不具合：「1.2E2」のようなEの指数表記は使えない。（接頭語をお使いください……）
●抵抗値取得とは
    抵抗値＝抵抗エディタのテキスト取得して英数記号半角変換
    （抵抗値の1文字右部分）で条件分岐
        「k」ならば、
            抵抗値＝抵抗値の（抵抗値の文字数）から1文字削除
            抵抗値＝抵抗値*1e3💧
        「M」ならば、
            抵抗値＝抵抗値の（抵抗値の文字数）から1文字削除
            抵抗値＝抵抗値*1e6💧
        「G」ならば、
            抵抗値＝抵抗値の（抵抗値の文字数）から1文字削除
            抵抗値＝抵抗値*1e9💧
        「m」ならば、
            抵抗値＝抵抗値の（抵抗値の文字数）から1文字削除
            抵抗値＝抵抗値*1e-3💧
    ここまで
    もし、抵抗値が数列判定ならば、
    // もし、抵抗値＝（抵抗値を実数変換して文字列変換）ならば、
        もし、（（抵抗値の1文字左部分）=「0」）かつ（（抵抗値で「.」が何文字目）！＝2）ならば、
            「先頭は0以外にしてください！」を表示して終わる
        ここまで
        抵抗値で戻る
    違えば、
        「正の数字を入力してください！」を表示して終わる
    ここまで
ここまで。



// 抵抗値の数字を上から3つと桁数を取得する。
●（抵抗値からN）桁取得とは、
    抵抗値配列=[0,0,0,0]
    
    もし、抵抗値＝（抵抗値の整数部分）ならば、
        抵抗値＝「｛抵抗値｝.0」
    ここまで
    抵抗値指数表記＝「｛抵抗値｝.toExponential({N-1})」をJS実行
    // それを表示
    
    // 抵抗値指数表記を表示
    もし、N=2ならば、
        抵抗値配列＠0＝抵抗値指数表記の1から1文字抜出して整数変換
        抵抗値配列＠1＝抵抗値指数表記の3から1文字抜出して整数変換
        抵抗値配列＠3＝抵抗値指数表記の5から2文字抜出して整数変換
    違えば、
        抵抗値配列＠0＝抵抗値指数表記の1から1文字抜出して整数変換
        抵抗値配列＠1＝抵抗値指数表記の3から1文字抜出して整数変換
        抵抗値配列＠2＝抵抗値指数表記の4から1文字抜出して整数変換
        抵抗値配列＠3＝抵抗値指数表記の6から2文字抜出して整数変換
    ここまで
    // 抵抗値配列を表示

    抵抗値配列で戻る。
ここまで。



// 抵抗値配列をカラーコードに直す
●（抵抗値配列をNで）抵抗色変換とは、
    // 「色は　　」を継続表示
    // N-2回
    //     色対数字配列＠（抵抗値配列＠(回数-1)）を継続表示
    // ここまで
    // 「 」を継続表示
    // 
    // もし、N=4ならば、
    //     
    // ここまで
    // 
    // 
    // もし、N=4ならば、
    //     色対乗数配列＠（(抵抗値配列＠3)+2）を表示
    //     
    // 違えば、もしN=5ならば、
    //     色対乗数配列＠（(抵抗値配列＠3)+1）を表示
    // ここまで
    
    抵抗色ラベル1を色対数字配列＠（抵抗値配列＠0）に背景色変更
    抵抗色ラベル2を色対数字配列＠（抵抗値配列＠1）に背景色変更
    もし、N＝4ならば、
        抵抗色ラベル3に「」をDOMテキスト設定
        抵抗色ラベル4を色対乗数配列＠（(抵抗値配列＠3)+2）に背景色変更
    違えば、
        抵抗色ラベル3を色対数字配列＠（抵抗値配列＠2）に背景色変更
        抵抗色ラベル4を色対乗数配列＠（(抵抗値配列＠3)+1）に背景色変更
    ここまで
ここまで



// 背景色を変更する
●（DOMをSに）背景色変更
    DOMにSをDOMテキスト設定
    DOMの「ボーダー」に「1px solid #000000」をDOMスタイル設定
    Sで条件分岐
        「白」ならば、背景色に白色を代入して、DOMの「色」に「#000000」をDOMスタイル設定💧
        「銀」ならば、背景色に銀色を代入して、DOMの「色」に「#000000」をDOMスタイル設定💧
        「金」ならば、背景色に金色を代入して、DOMの「色」に「#000000」をDOMスタイル設定💧
        「黒」ならば、背景色に黒色を代入して、DOMの「色」に「#ffffff」をDOMスタイル設定💧
        「茶」ならば、背景色に茶色を代入して、DOMの「色」に「#ffffff」をDOMスタイル設定💧
        「赤」ならば、背景色に赤色を代入して、DOMの「色」に「#ffffff」をDOMスタイル設定💧
        「橙」ならば、背景色に「#ffa500」を代入して、DOMの「色」に「#000000」をDOMスタイル設定💧
        「黄」ならば、背景色に黄色を代入して、DOMの「色」に「#000000」をDOMスタイル設定💧
        「緑」ならば、背景色に緑色を代入して、DOMの「色」に「#000000」をDOMスタイル設定💧
        「青」ならば、背景色に青色を代入して、DOMの「色」に「#ffffff」をDOMスタイル設定💧
        「紫」ならば、背景色に「#8949a6」を代入して、DOMの「色」に「#ffffff」をDOMスタイル設定💧
        「灰」ならば、背景色に灰色を代入して、DOMの「色」に「#000000」をDOMスタイル設定💧
    ここまで
    DOMの「背景色」に背景色をDOMスタイル設定
ここまで





################################################################################
#################### カラーコード→抵抗値 ####################

########## GUI ##########
改行作成して改行作成して改行作成して改行作成
「【カラーコード　⇒　抵抗値】」のラベル作成
　それに{"文字サイズ": "1.7em", "font-weight": "bold", "border-bottom": "1px solid #000000", "背景色": "#ffe0e0", "padding": "0 0em"}をDOMスタイル一括設定
改行作成して改行作成

『カラーコードを入力してください。（「色」や空白を含んでも構いません。「オレンジ」は「橙」に変換されます）』のラベル作成して改行作成
『　　（ex. 「茶色黒 オレンジ　金」は「茶黒橙金」）』のラベル作成
改行作成
　
「↓」のラベル作成して改行作成
色エディタ＝「」のエディタ作成
　それの「margin」に「0 4em 0 0」をDOMスタイル設定
色本数ラジオ＝「色本数」で["4線（カーボン抵抗など）","5線（金属皮膜抵抗など）"]のラジオボタン作成
// 色本数ラジオを反復：
//     「{対象キー}: {対象}」を表示。
　色本数ラジオ["DOM_input4線（カーボン抵抗など）"]の「checked」にオンをDOM属性設定
　色本数ラジオ["DOM_label4線（カーボン抵抗など）"]の「text-decoration」に「underline」をDOMスタイル設定
　色本数ラジオ["DOM_label5線（金属皮膜抵抗など）"]の「text-decoration」に「underline」をDOMスタイル設定
改行作成
色変換ボタン＝「変換」のボタン作成
　それに{"余白": "5px", "文字サイズ": "1.5em"}をDOMスタイル一括設定
改行作成して改行作成して改行作成


「入力は」のラベル作成
　それの「padding」に「0 2em 0 0」をDOMスタイル設定
「:」のラベル作成
　それの「padding」に「0 1em 0 0」をDOMスタイル設定
色入力ラベル＝「－－－－　－」のラベル作成
　それの「font-weight」に「bold」をDOMスタイル設定
改行作成して改行作成して改行作成


「【抵抗値】」のラベル作成
　それに{"文字サイズ": "1.2em", "font-weight": "bold", "padding": "0 1em 0 0"}をDOMスタイル一括設定
「許容差　: 」のラベル作成
許容差ラベル＝「指定なし」のラベル作成
　それの「font-weight」に「bold」をDOMスタイル設定
「%」のラベル作成
改行作成

// テーブルを作り直す際に親要素とするダミーDOM
定数　DUMMY＝空のラベル作成

色抵抗値二次元配列＝[["単位", "抵抗値", "誤差範囲"], ["指数表記", "- Ω", "- Ω ~ - Ω"], ["[Ω]", "- Ω", "- Ω ~ - Ω"], ["[kΩ]", "- kΩ", "- kΩ ~ - kΩ"], ["[MΩ]", "- MΩ", "- MΩ ~ - MΩ"]]
色抵抗値テーブル＝DUMMYに色抵抗値二次元配列のMYテーブル作成



// ラジオのラベルをクリックしたら変更
色本数ラジオ["DOM_label4線（カーボン抵抗など）"]をクリックした時には、
    色本数ラジオ["DOM_input4線（カーボン抵抗など）"]の「checked」にオンをDOM属性設定
ここまで
色本数ラジオ["DOM_label5線（金属皮膜抵抗など）"]をクリックした時には、
    色本数ラジオ["DOM_input5線（金属皮膜抵抗など）"]の「checked」にオンをDOM属性設定
ここまで



// DUMMYの中にテーブル作成することでテーブルを作り直す際に位置を指定できる。
●（DOMにAAの）MYテーブル作成とは
    DOMにDOM親要素設定
    RETDOM=AAのテーブル作成
    貯蔵庫親要素にDOM親要素設定
    RETDOMで戻る
ここまで



########## クリックした時の処理 ##########
色変換ボタンをクリックした時には、
    main__色to抵抗処理
ここまで

色エディタをキー押した時には、
    もし押されたキー＝「Enter」ならば、
        main__色to抵抗処理
    ここまで。
ここまで


// メイン処理
●色to抵抗処理とは
    色ラベルリセット
    もし、（色本数ラジオ["DOM_input4線（カーボン抵抗など）"]の「checked」をDOM属性取得）ならば、
        色本数＝4
    違えば、
        色本数＝5
    ここまで
    入力カラーコード＝色エディタのDOMテキスト取得
    入力カラーコード＝入力カラーコードの「色」を「」に置換して「オレンジ」を「橙」に置換して「　」を「」に置換して「 」を「」に置換
    // 入力カラーコードを表示
    
    許容差フラグ＝入力カラーコードに色本数が許容差存在
    // 許容差フラグを表示
    
    色入力ラベルに入力カラーコードを許容差フラグと色本数で色入力テキスト設定
    
    色抵抗値二次元配列＝入力カラーコードを色本数で許容差フラグの色抵抗変換
    
    DUMMYから色抵抗値テーブルをDOM子要素削除
    色抵抗値テーブル＝DUMMYに色抵抗値二次元配列のMYテーブル作成
ここまで



########## 関数 ##########
●色ラベルリセットとは
    色入力ラベルに「－－－－　－」をDOMテキスト設定
    許容差ラベルに「指定なし」をDOMテキスト設定
    DUMMYから色抵抗値テーブルをDOM子要素削除
    色抵抗値二次元配列＝[["単位", "抵抗値", "誤差範囲"], ["指数表記", "- Ω", "- Ω ~ - Ω"], ["[Ω]", "- Ω", "- Ω ~ - Ω"], ["[kΩ]", "- kΩ", "- kΩ ~ - kΩ"], ["[MΩ]", "- MΩ", "- MΩ ~ - MΩ"]]
    色抵抗値テーブル＝DUMMYに色抵抗値二次元配列のMYテーブル作成
ここまで



●（SにNが）許容差存在とは
    もし、(Sの文字数)=Nならば、
        TRUEで戻る
    違えば、もし、(Sの文字数)=N-1ならば、
        FALSEで戻る
    違えば、
        「カラーコードが多いか少ないです。｛N｝個か、許容差を抜いた｛N-1｝個にしてください。」と表示して終わる
    ここまで
ここまで



●(DOMにSをFとNで)色入力テキスト設定とは
    設定テキスト＝「」
    // もし、F=TRUEならば、
    //     Sを反復
    //         もし、対象キー＝（（Sの文字数）-1）ならば、
    //             設定テキスト＝「　｛対象｝」を設定テキストに追加
    //         違えば、もし、対象キー＝（）
    //             設定テキスト＝対象を設定テキストに追加
    //         ここまで
    //     ここまで
    // 違えば、
    //     設定テキスト＝S&「　－」
    // ここまで
    
    N-2回
        設定テキスト＝S@(回数-1)を設定テキストに追加
    ここまで
    設定テキスト＝設定テキスト&「 」&S@(N-2)&「　」
    もし、F=TRUEならば、
        設定テキスト＝設定テキスト&S@(N-1)
    違えば、
        設定テキスト＝設定テキスト&「－」
    ここまで
    
    // 設定テキストを表示
    DOMに設定テキストをDOMテキスト設定
ここまで



// 色から数値に変更。許容差のラベル書き換え。表用の二次元配列書き換え。
●（SをNでFの）色抵抗変換とは
    許容差フラグ＝F
    AA＝[["単位", "抵抗値", "誤差範囲"], ["指数表記", "- Ω", "- Ω ~ - Ω"], ["[Ω]", "- Ω", "- Ω ~ - Ω"], ["[kΩ]", "- kΩ", "- kΩ ~ - kΩ"], ["[MΩ]", "- MΩ", "- MΩ ~ - MΩ"]]
    抵抗値＝0
    
    (N-2)回
        S＠（回数-1）で条件分岐
            「黒」ならば、抵抗値＝抵抗値*10+0💧
            「茶」ならば、抵抗値＝抵抗値*10+1💧
            「赤」ならば、抵抗値＝抵抗値*10+2💧
            「橙」ならば、抵抗値＝抵抗値*10+3💧
            「黄」ならば、抵抗値＝抵抗値*10+4💧
            「緑」ならば、抵抗値＝抵抗値*10+5💧
            「青」ならば、抵抗値＝抵抗値*10+6💧
            「紫」ならば、抵抗値＝抵抗値*10+7💧
            「灰」ならば、抵抗値＝抵抗値*10+8💧
            「白」ならば、抵抗値＝抵抗値*10+9💧
            違えば、「数値の入力に誤りがあります。」と表示して終わる💧
        ここまで
    ここまで
    
    S＠（N-2）で条件分岐
        「黒」ならば、抵抗値＝抵抗値*10^0💧
        「茶」ならば、抵抗値＝抵抗値*10^1💧
        「赤」ならば、抵抗値＝抵抗値*10^2💧
        「橙」ならば、抵抗値＝抵抗値*10^3💧
        「黄」ならば、抵抗値＝抵抗値*10^4💧
        「緑」ならば、抵抗値＝抵抗値*10^5💧
        「青」ならば、抵抗値＝抵抗値*10^6💧
        「紫」ならば、抵抗値＝抵抗値*10^7💧
        「灰」ならば、抵抗値＝抵抗値*10^8💧
        「白」ならば、抵抗値＝抵抗値*10^-3💧
        「銀」ならば、抵抗値＝抵抗値*10^-2💧
        「金」ならば、抵抗値＝抵抗値*10^-1💧
        違えば、「乗数の入力に誤りがあります。」と表示して終わる💧
    ここまで
    
    もし、F＝はいならば、
        S＠(N-1)で条件分岐
            「茶」ならば、許容差＝1💧
            「赤」ならば、許容差＝2💧
            「橙」ならば、許容差＝0.05💧
            「緑」ならば、許容差＝0.5💧
            「青」ならば、許容差＝0.25💧
            「紫」ならば、許容差＝0.1💧
            「金」ならば、許容差＝5💧
            「銀」ならば、許容差＝10💧
            違えば、「許容差の入力に誤りがあります。」と表示して終わる💧
        ここまで
        許容差ラベルに許容差をDOMテキスト設定
    ここまで
    
    // 「抵抗値：｛抵抗値｝Ω｛改行｝許容差：｛許容差｝%」を表示
    
    // 表の中身を書き換える
    TEMP1=抵抗値を(N-3)でJS浮動小数処理
    // TEMP1を表示
    AA[1][1]=（TEMP1の「e」を「 × 10^」に置換して「+」を「」に置換）&「 Ω」
    TEMP1=TEMP1を実数変換
    AA[2][1]=TEMP1&「 Ω」
    AA[3][1]=((抵抗値/1e3)を(N-3)でJS浮動小数処理して実数変換)&「 kΩ」
    AA[4][1]=((抵抗値/1e6)を(N-3)でJS浮動小数処理して実数変換)&「 MΩ」
    
    もし、F=はいならば、
        抵抗誤差小＝抵抗値*(1-許容差/100)
        抵抗誤差大＝抵抗値*(1+許容差/100)
        TEMP2＝抵抗誤差小を(4)でJS浮動小数処理
        TEMP3＝抵抗誤差大を(4)でJS浮動小数処理
        AA[1][2]=（TEMP2の「e」を「 × 10^」に置換して「+」を「」に置換）&「 Ω ~ 」&（TEMP3の「e」を「 × 10^」に置換して「+」を「」に置換）&「 Ω」
        TEMP2=TEMP2を実数変換
        TEMP3=TEMP3を実数変換
        AA[2][2]=TEMP2&「 Ω ~ 」&TEMP3&「 Ω」
        AA[3][2]=((抵抗誤差小/1e3)を4でJS浮動小数処理して実数変換)&「 kΩ ~ 」&((抵抗誤差大/1e3)を4でJS浮動小数処理して実数変換)&「 kΩ」
        AA[4][2]=((抵抗誤差小/1e6)を4でJS浮動小数処理して実数変換)&「 MΩ ~ 」&((抵抗誤差大/1e6)を4でJS浮動小数処理して実数変換)&「 MΩ」
    ここまで
    
    AAで戻る
ここまで



// .toExponential用の処理。整数だと動かないのなんで。
●（NをLで）JS浮動小数処理とは
    もし、N＝（Nの整数部分）ならば、
        JSN＝「｛N｝.0」
    違えば、
        JSN＝N
    ここまで
    「{JSN}.toExponential({L})」をJS実行して戻る
ここまで





################################################################################
#################### おまけ　値対応表とE24系列 ####################
5回　改行作成
「【おまけ】」のラベル作成
　それに{"文字サイズ": "1.3em", "font-weight": "bold", "border-bottom": "1px solid #000000", "背景色": "#ffe0e0", "padding": "0 0em"}をDOMスタイル一括設定
改行作成して改行作成
「https://n3s.nadesi.com/image.php?f=217.png」の画像作成
　それの「幅」に「50em」をDOMスタイル設定
改行作成

『カラーコードを数値に読み替える表とE24系列の表です。』のラベル作成して改行作成
『参考：』のラベル作成
リンク1=『a』のDOM部品作成
DOM親要素へリンク1をDOM子要素追加
　リンク1に「抵抗器のカラーコード・表示の読み方、覚え方 (工程動画も公開!) | 抵抗器の総合メーカー 株式会社赤羽電具製作所」をDOMテキスト設定
　リンク1の「href」に「https://www.akaneohm.com/column/marking/」をDOM属性設定
　リンク1の「target」に「_blank」をDOM属性設定
　リンク1の「rel」に「noopener noreferrer」をDOM属性設定
改行作成
『　　：』のラベル作成
リンク2=『a』のDOM部品作成
DOM親要素へリンク2をDOM子要素追加
　リンク2に「抵抗器 カタログの読み方と解説 | 抵抗器の総合メーカー 株式会社赤羽電具製作所」をDOMテキスト設定
　リンク2の「href」に「https://www.akaneohm.com/column/specread/」をDOM属性設定
　リンク2の「target」に「_blank」をDOM属性設定
　リンク2の「rel」に「noopener noreferrer」をDOM属性設定