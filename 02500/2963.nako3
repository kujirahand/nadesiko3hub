### [作品情報]
### 掲載URL=https://n3s.nadesi.com/id.php?2963
### タイトル=クラスのようなものを使えるプラグイン
### 作者=たかた(user_id=0)
### ライセンス=MIT
### 説明=なでしこで、JavaScriptのclassのように、メソッドや静的メソッドを定義したり、実体を作成してメソッドを呼んだりできます。まだ機能が不十分かも..
### 対象バージョン=3.6.45
### URL=
### 種類=wnako
### タグ=
### 更新日時=2025-02-08 14:59:03
###

//================================
// なでしこクラスプラグイン
//================================

//
// なでしこで、JSのclassに近い機能を簡単に使用できるようにしてみたプラグインです。
// 現時点では、メソッドと静的メソッドの定義と呼び出しが使えます。
// 使用方法は、一番下の「使い方」を参照してください。
//

# 新しいクラスを作成する
●クラス作成():
    定数 クラス = {
      __isClass: true
      __methods: {},
      __staticMethods: {}
    }
    クラスを戻す

# クラス生成時の処理を定義する (コンストラクタ)
●クラス生成時(クラスの処理関数で):
    もしTYPEOF(クラス) != 'object'なら:
        エラー発生('クラス生成時の定義では1番目の引数にクラスを入力してください')
    
    もしTYPEOF(処理関数) != 'function'なら:
        エラー発生('クラス生成時の定義では無名関数を定義してください')
    
    クラスの'__constructor'の処理関数でメソッド定義

# メソッドを定義する
●(クラスのメソッド名の処理関数で)メソッド定義:
    もしTYPEOF(クラス) != 'object' || !クラス.__isClassなら:
        エラー発生('メソッド定義では1番目の引数にクラスを入力してください')
    
    もしTYPEOF(メソッド名) != 'string'なら:
        エラー発生('メソッド定義では2番目の引数にメソッド名を文字列で入力してください')
    
    もしTYPEOF(処理関数) != 'function'なら:
        エラー発生('メソッド定義では無名関数を定義してください')
        
    クラス['__methods'][メソッド名] = 処理関数

# 静的メソッドを定義する
●(クラスのメソッド名の処理関数で)静的メソッド定義:
    もしTYPEOF(クラス) != 'object' || !クラス.__isClassなら:
        エラー発生('静的メソッド定義では1番目の引数にクラスを入力してください')
    
    もしTYPEOF(メソッド名) != 'string'なら:
        エラー発生('静的メソッド定義では2番目の引数にメソッド名を文字列で入力してください')
    
    もしTYPEOF(処理関数) != 'function'なら:
        エラー発生('静的メソッド定義では無名関数を定義してください')
    
    クラス['__staticMethods'][メソッド名] = 処理関数

# 静的メソッドを実行する
●静的メソッド実行(クラスのメソッド名をメソッド引数で):
    もしTYPEOF(クラス) != 'object' || !クラス.__isClassなら:
        エラー発生('静的メソッド実行では1番目の引数にクラスを入力してください')
    
    もしTYPEOF(メソッド名) != 'string'なら:
        エラー発生('静的メソッド実行では2番目の引数にメソッド名を文字列で入力してください')
    
    もしTYPEOF(メソッド引数) != 'object' || メソッド引数['length'] == undefinedなら:
        エラー発生('静的メソッド実行では3番目の引数にメソッドに渡す引数を配列で入力してください')
    
    定数 メソッド = クラス['__staticMethods'][メソッド名]
    
    もし!メソッドなら:
        エラー発生(「入力されたクラスには"{メソッド名}"という静的メソッドは存在しません」)
    
    定数 JSメソッド引数 = メソッド引数と[クラス]を配列足
    定数 戻り値 = メソッドをJSメソッド引数でJS関数実行
    戻り値を戻す

# クラスの実体を生成する
●実体作成(クラスをコンストラクタ引数で):
    もしTYPEOF(クラス) != 'object' || !クラス.__isClassなら:
        エラー発生('実体作成では1番目の引数にクラスを入力してください')
    
    もしTYPEOF(コンストラクタ引数) != 'object' || コンストラクタ引数['length'] == undefinedなら:
        エラー発生('実体作成では2番目の引数にコンストラクタに渡す引数を配列で入力してください')
    
    定数 実体 = {}
    
    // 実体にメソッドを付与
    '(classObj, instObj) => {
        for (const key in classObj.__methods) {
            instObj[key] = classObj.__methods[key]
        }
    }'を[クラス, 実体]でJS関数実行
    
    実体の'__constructor'をコンストラクタ引数でメソッド実行
    
    実体を戻す

# 実体のメソッドを呼び出す
●メソッド実行(実体のメソッド名をメソッド引数で):
    もしTYPEOF(実体) != 'object'なら:
        エラー発生('メソッド実行では1番目の引数にクラスを入力してください')
    
    もし実体.__isClassなら:
        エラー発生('メソッド実行では引数にクラスではなく実体を入力してください。クラスの静的メソッドを呼び出すには、"静的メソッド実行"を使用してください')
        
    もしTYPEOF(メソッド名) != 'string'なら:
        エラー発生('メソッド実行では2番目の引数にメソッド名を文字列で入力してください')
    
    もしTYPEOF(メソッド引数) != 'object' || メソッド引数['length'] == undefinedなら:
        エラー発生('メソッド実行では3番目の引数にメソッドに渡す引数を配列で入力してください')
    
    定数 メソッド = 実体[メソッド名]
    
    もし!メソッドなら:
        エラー発生(「入力された実体には"{メソッド名}"という静的メソッドは存在しません」)
    
    定数 JSメソッド引数 = メソッド引数と[実体]を配列足
    定数 戻り値 = メソッドをJSメソッド引数でJS関数実行
    戻り値を戻す

//--------------------------------
// 使い方
//--------------------------------
もし プラグイン名 == 'メイン' なら:
    // 人クラスを作成
    定数 人 = クラス作成
    
    // 静的メソッドを定義
    人の「苗字一致判定」の静的メソッド定義には(一人目と二人目の):
        もし 一人目.苗字 == 二人目.苗字 なら:
            TRUEを戻す
        違えば:
            FALSEを戻す
    
    // クラス生成時の処理(→コンストラクタ)を定義
    人のクラス生成時には(苗字, 名前, this):
      this.苗字 = 苗字
      this.名前 = 名前
    
    // メソッドを定義
    人の「フルネーム」のメソッド定義には(this):
        (this.苗字 & this.名前)を戻す
    
    // クラスの実体を作成
    定数 徳川家康 = 人を['徳川', '家康']で実体作成
    定数 徳川家光 = 人を['徳川', '家光']で実体作成
    
    // メソッドを実行
    定数 フルネーム = 徳川家康の「フルネーム」を[]でメソッド実行
    「フルネーム: { フルネーム }」を表示
    
    // 静的メソッドを実行
    定数 苗字一致判定 = 人の「苗字一致判定」を[徳川家康, 徳川家光]で静的メソッド実行
    「苗字一致判定: { 苗字一致判定 }」を表示