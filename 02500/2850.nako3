### [作品情報]
### 掲載URL=https://n3s.nadesi.com/id.php?2850
### タイトル=敵３機の簡単シューティングゲーム
### 作者=むーんうるふ(user_id=0)
### ライセンス=MIT
### 説明=PC用：なでしこ３を利用したシンプルなゲーム作成のサンプルです。マウスで移動、ｂキーで弾発射。400x400。
### 対象バージョン=3.6.14
### URL=https://www.amazon.co.jp/dp/B0DB4XQS43
### 種類=wnako
### タグ=なでしこ３,ゲーム開発初心者向け,PC用,MoonWolf
### 更新日時=2024-08-20 02:36:22
###

#----------------------------------------------------------------------------
# MoonWolf なでしこチャレンジ！ 敵３機 簡単シューティング Ver 1.00
#
# ＜なでしこ３：ゲーム開発初心者用のサンプル・プログラム＞
# (C)2024 MoonWolf(むーんうるふ) / MITライセンス
#
# PC向けです。コンパクトですがゲームの要素を一通り持っています。
# 要素とは：自機のマウス移動、敵の移動、弾発射、当たり判定、スコア処理
# 内容：敵は３機、制限時間内でたくさんの敵にHITさせハイスコアを狙う
#
# 操作方法：
# 　　マウスで左右の移動 / bキーで弾を発射
# キャンバス 400x400
#
# 関連書籍：
# 『MoonWolfと学ぶ 日本語プログラム開発 なでしこ 第２巻 ゲーム開発 基礎練習編』
#  Amazonへのリンク：https://www.amazon.co.jp/dp/B0DB4XQS43
# なでしこ３にてゲーム開発経験ゼロの方に、その基礎練習方法をお伝えします。
#----------------------------------------------------------------------------


# 画面の設定
描画中キャンバスの「幅」に400をDOM属性設定。
描画中キャンバスの「高さ」に400をDOM属性設定。

# ゲームの長さの設定
GameTime = 1000

# 自機の初期位置
自機X = 150
自機Y = 365

# 弾の位置
弾X = -100
弾Y = -100

# スコアの初期化
スコア = 0

# 敵の初期位置と移動方向（配列で管理）
敵リスト = [
  {"X": 0, "Y": 50, "移動方向X": 3, "移動方向Y": 3},
  {"X": 50, "Y": 100, "移動方向X": 3, "移動方向Y": 3},
  {"X": 100, "Y": 150, "移動方向X": 3, "移動方向Y": 3}
]

# マウス移動時の処理
描画中キャンバスをマウス移動した時には
    自機X = マウスX
ここまで。

# キー押した時の処理
DOCUMENTのキー押した時には
    もし、押されたキーが「b」 ならば
        もし、弾Y == -100ならば
            # 弾を発射
            弾X = 自機X
            弾Y = 自機Y
        ここまで。
    ここまで。
ここまで。

# 当たり判定関数
関数 当たり判定(敵, 弾X, 弾Y)
    もし、絶対値(敵["X"] - 弾X) < 15 かつ 絶対値(敵["Y"] - 弾Y) < 15 ならば
        当たり表示(敵["X"], 敵["Y"] + 25)
        弾X = -100
        弾Y = -100
        # スコアを更新
        スコア = スコア + 50
    ここまで。
ここまで。

# 当たり表示関数
関数 当たり表示(x, y)
    白色に塗色設定。
    「20px sans-serif」に描画フォント設定。
    [x, y]に"当たり！"を文字描画。
    0.5秒待つ
    黒色に塗色設定。
    [x, y]に"当たり！"を文字描画。
ここまで。

# 敵の移動関数
関数 敵移動(敵)
    敵["X"] = 敵["X"] + 2 *敵["移動方向X"]
    敵["Y"] = 敵["Y"] + 2 *敵["移動方向Y"]
    
    # 上下のはね返り処理
    もし、敵["Y"] >= 300 または 敵["Y"] <= 0 ならば
        敵["移動方向Y"] = 敵["移動方向Y"] * -1
    ここまで。
    
    # 左右のはね返り処理
    もし、敵["X"] >= 400 または 敵["X"] <= 0 ならば
        敵["移動方向X"] = 敵["移動方向X"] * -1
    ここまで。
ここまで。

# メインループ
(GameTime)回繰り返す
    # 画面を再描画
    黒色に塗色設定。
    [0, 0, 400, 400]に四角描画。

    # スコアの表示
    白色に塗色設定。
    「20px sans-serif」に描画フォント設定。
    [10, 20]に("Score=" & スコア)を文字描画。

    # カウントダウンの表示
    残り時間 = GameTime - 回数
    [230, 20]に("残り時間=" & 残り時間)を文字描画。

    # 自機の描画
    水色に塗色設定。
    青色に線色設定。10に線太設定。
    [自機X, 自機Y]へ20の円描画。

    # 弾の移動と描画
    もし、弾Y > -100ならば
        赤色に塗色設定。 # 弾の色を赤に設定
        赤色に線色設定。 # 枠色を赤に設定
        [弾X, 弾Y]へ5の円描画。
        弾Y = 弾Y - 15
        もし、弾Y <= 0ならば
            # 弾が画面外に出たら初期化
            弾X = -100
            弾Y = -100
        ここまで。
        青色に線色設定。 # 描画後、枠色を青に戻す
    ここまで。

    # 敵の移動と描画
    敵リストを反復
        敵 = それ
        敵移動(敵)
        黄色に塗色設定。
        [敵["X"], 敵["Y"]]へ20の円描画。
        # 当たり判定のチェック
        当たり判定(敵, 弾X, 弾Y)
    ここまで。

    # Game Over の表示
    もし　GameTime-回数=0　ならば
    　白色に塗色設定。
　    「40px sans-serif」に描画フォント設定。
　　　[80,200]に（"GAME OVER")を文字描画
　　　「30px sans-serif」に描画フォント設定。
　　　[70,250]に（"Your Score＝" & スコア)を文字描画
    ここまで

    0.03秒待つ
ここまで。